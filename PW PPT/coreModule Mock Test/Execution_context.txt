When a JavaScript script is executed, the JavaScript engine creates an Execution Context, which handles the entire process of parsing and executing the code. The Execution Context serves as an environment for transforming and running the script.
The Execution Context consists of two types: global and function. The global execution context is established when the JavaScript script first starts running, representing the global scope. It defines the variables and functions that are accessible throughout the entire script. On the other hand, a function execution context is created whenever a function is invoked. It represents the local scope of that function, where variables and functions are specific to that function's execution.
The JavaScript Execution Context operates in two distinct phases: the creation phase and the execution phase. During the creation phase, the Execution Context is set up. The JavaScript engine allocates memory for variables and functions, determining their initial values and creating a scope chain. The scope chain defines the order in which variables and functions are accessed. Additionally, the engine sets up any necessary JavaScript objects and links them to the execution context.
Once the creation phase is completed, the Execution Context moves to the execution phase. Here, the JavaScript engine processes the code within the Execution Context. It executes statements, evaluates expressions, and handles function calls. The engine follows the order of operations specified in the code, manipulating data and producing desired outcomes.
It consists of two components: memory and code. The memory component stores variables, functions, and other relevant data, while the code component contains the actual instructions to be executed.